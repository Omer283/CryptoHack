import numpy as np
from itertools import count
from math import gcd
def ext_gcd(a: int, b: int):
    """return (g, x, y) such that a*x + b*y = g = gcd(a, b)"""
    x0, x1, y0, y1 = 0, 1, 1, 0
    while a != 0:
        (q, a), b = divmod(b, a), a
        y0, y1 = y1, y0 - q * y1
        x0, x1 = x1, x0 - q * x1
    return b, x0, y0

def inv(x, p):
    return ext_gcd(x, p)[1]


def bpw(a, k, p):
    base = a
    cur = 1
    while k != 0:
        if k % 2 == 1:
            cur *= base
            cur %= p
        base *= base
        base %= p
        k >>= 1
    return cur


def legendre_slow(a, p):
    if a % p == 0:
        return 0
    ret = bpw(a, (p - 1) // 2, p)
    if ret < 0:
        ret += p
    return ret if ret == 1 else -1


def modular_sqrt(a, p):
    if legendre_slow(a, p) != 1:
        return 0
    elif a == 0:
        return 0
    elif p == 2:
        return p
    elif p % 4 == 3:
        return bpw(a, (p + 1) // 4, p)
    s = p - 1
    e = 0
    while s % 2 == 0:
        s //= 2
        e += 1
    n = 2
    while legendre_slow(n, p) == 1:
        n += 1
    x = bpw(a, (s + 1) // 2, p)
    b = bpw(a, s, p)
    g = bpw(n, s, p)
    r = e
    while True:
        t = b
        m = 0
        for m in range(r):
            if t == 1:
                break
            t = bpw(t, 2, p)
        if m == 0:
            return x
        gs = bpw(g, 2 ** (r - m - 1), p)
        g = (gs * gs) % p
        x = (x * gs) % p
        b = (b * g) % p
        r = m


def crt_two(a1, a2, m1, m2):
    mul = m1 * m2
    x = a2 * inv(m1, m2) * m1 + a1 * inv(m2, m1) * m2
    x %= mul
    if x < 0:
        x += mul
    return x, mul


def crt(a: list, m: list):
    n = len(a)
    if n == 1:
        return a[0], m[0]
    ca, cm = crt_two(a[0], a[1], m[0], m[1])
    for i in range(2, n):
        ca, cm = crt_two(ca, a[i], cm, m[i])
    return ca, cm


def gs(v):
    n = len(v)
    d = len(v[0])
    u = []
    u.append(v[0])
    for i in range(1, n):
        vec = 0
        for j in range(i):
            mu = np.dot(v[i], u[j] / (np.linalg.norm(u[j]) ** 2))
            vec += mu * u[j]
        u.append(v[i] - vec)
    return np.array(u)


def gauss_reduction(u, v):
    u, v = np.array(u), np.array(v)
    while True:
        if np.dot(v, v) < np.dot(u, u):
            u, v = v, u
        m = np.dot(u, v) // np.dot(u, u)
        if m == 0:
            return u, v
        v = np.subtract(v, m * u)


def nth_root(x, n):
    "returns floor(x^(1/n))"
    l, r = 1, x
    bst = 1
    while l <= r:
        mid = (l + r) // 2
        ret = pow(mid, n)
        if ret == x:
            return mid
        elif ret < x:
            bst = mid
            l = mid + 1
        else:
            r = mid - 1
    return bst


def get_pq(n, phi):
    a = n + 1 - phi
    p = (a + nth_root(a * a - 4 * n)) // 2
    q = n // p
    if p * q != n:
        return -1, -1
    else:
        return p, q


def pollard_rho(n):
    x = 2
    for cycle in count(1):
        y = x
        for i in range(2 ** cycle):
            x = (x * x + 1) % n
            factor = gcd(x - y, n)
            if factor > 1:
                return factor


def pollard_p_1(n):
    "p - 1 or q - 1 have small prime factors"


def get_totient(n):
    "works in n^0.5, can be easily improved"
    ans = 1
    i = 2
    while i * i <= n:
        cnt = 0
        while n % i == 0:
            n /= i
            cnt += 1
        if cnt != 0:
            ans *= (pow(i, cnt) - pow(i, cnt - 1))
            print(i)
    if n != 1:
        ans *= (n - 1)
    return ans
